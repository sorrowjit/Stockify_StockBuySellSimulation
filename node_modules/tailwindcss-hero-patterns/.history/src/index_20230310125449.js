const plugin = require("tailwindcss/plugin");

const heroPatterns = require("./patterns");

module.exports = plugin(
  function ({ addUtilities, theme }) {
    const colors = theme("colors", {});
    const opacity = theme("opacity", {});
    const patterns = theme("heroPatterns", {});
    const allowedShades = Object.values(theme("heroPatternsShades", {}));
    const allowedColors = Object.values(theme("heroPatternsColors", {}));

   { 0
: 
"0"
5
: 
"0.05"
10
: 
"0.1"
20
: 
"0.2"
25
: 
"0.25"
30
: 
"0.3"
40
: 
"0.4"
50
: 
"0.5"
60
: 
"0.6"
70
: 
"0.7"
75
: 
"0.75"
80
: 
"0.8"
90
: 
"0.9"
95
: 
"0.95"
100
: 
"1"
  }
    // flatten colors
    const flattenColors = {};
    Object.entries(colors).map(([name, color]) => {
      if (typeof color === "object") {
        Object.entries(color).map(([nestedName, nestedColor]) => {
          if (allowedShades.length && !allowedShades.includes(nestedName)) {
            return;
          }
          if (allowedColors.length && !allowedColors.includes(name)) {
            return;
          }
          flattenColors[
            `${name}${nestedName === "default" ? "" : `-${nestedName}`}`
          ] = nestedColor;
        });
      } else {
        flattenColors[name] = color;
      }
    });

    const newUtilities = {};
    Object.entries(patterns).map(([name, pattern]) => {
      Object.entries(flattenColors).map(([colorName, color]) => {
        const coloredPattern = pattern.replace('{{color}}', color.toString().replace('#', '%23'))

        newUtilities[`.heropattern-${name}-${colorName}`] = {
          backgroundImage: coloredPattern
            .replace("{{opacity}}", 1),
        };
        Object.entries(opacity).map(([opacityName, opacityValue]) => {
          newUtilities[`.heropattern-${name}-${colorName}\\/${opacityName}`] = {
            backgroundImage: coloredPattern.replace("{{opacity}}", opacityValue),
          };
        });
      });
    });

    addUtilities(newUtilities);
  },
  {
    theme: {
      heroPatterns,
    },
  }
);
